
var util = require("util");
var choreography = require("temboo/core/choreography");


/*
    BatchCSVInsert
    Create Salesforce Objects of any type (Account, Lead, Contact, etc) by specifying rows in CSV format.
*/


var BatchCSVInsert = function(session) {
    /*
        Create a new instance of the BatchCSVInsert Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/Salesforce/BatchCSVInsert"
    BatchCSVInsert.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new BatchCSVInsertResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new BatchCSVInsertInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the BatchCSVInsert
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var BatchCSVInsertInputSet = function() {
    BatchCSVInsertInputSet.super_.call(this);
        /*
        Set the value of the CSVInput input for this Choreo. ((conditional, multiline) CSV data to insert. Column names must match Salesforce field names exactly. Required unless using the VaultFile alias (an advanced option used when running Choreos in the Temboo Designer).)
        */
        this.set_CSVInput = function(value) {
            this.setInput("CSVInput", value);
        }

        /*
        Set the value of the Password input for this Choreo. ((required, password) Your Salesforce password.)
        */
        this.set_Password = function(value) {
            this.setInput("Password", value);
        }

        /*
        Set the value of the SalesforceObjectType input for this Choreo. ((optional, string) The object type that you are inserting (i.e.Lead, Contact, Account). Defaults to Lead.)
        */
        this.set_SalesforceObjectType = function(value) {
            this.setInput("SalesforceObjectType", value);
        }

        /*
        Set the value of the SecurityToken input for this Choreo. ((required, string) Your Salesforce security token for making API calls.)
        */
        this.set_SecurityToken = function(value) {
            this.setInput("SecurityToken", value);
        }

        /*
        Set the value of the Username input for this Choreo. ((required, string) Your Salesforce username.)
        */
        this.set_Username = function(value) {
            this.setInput("Username", value);
        }

        /*
        Set the value of the VaultCSVFile input for this Choreo. (A path to a CSV file in the vault. Required unless specifying your data in CSVInput.)
        */

}

/*
A ResultSet with methods tailored to the values returned by the BatchCSVInsert Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var BatchCSVInsertResultSet = function(resultStream) {
    BatchCSVInsertResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "Response" output from this Choreo execution. ((xml) The response from Salesforce)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
}

util.inherits(BatchCSVInsert, choreography.Choreography);
util.inherits(BatchCSVInsertInputSet, choreography.InputSet);
util.inherits(BatchCSVInsertResultSet, choreography.ResultSet);
exports.BatchCSVInsert = BatchCSVInsert;


/*
    CreateAccountObject
    Creates new account object.
*/


var CreateAccountObject = function(session) {
    /*
        Create a new instance of the CreateAccountObject Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/Salesforce/CreateAccountObject"
    CreateAccountObject.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new CreateAccountObjectResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new CreateAccountObjectInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the CreateAccountObject
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var CreateAccountObjectInputSet = function() {
    CreateAccountObjectInputSet.super_.call(this);
        /*
        Set the value of the AccountName input for this Choreo. ((required, string) The name of the account to create)
        */
        this.set_AccountName = function(value) {
            this.setInput("AccountName", value);
        }

        /*
        Set the value of the Password input for this Choreo. ((required, password) Your Salesforce password.)
        */
        this.set_Password = function(value) {
            this.setInput("Password", value);
        }

        /*
        Set the value of the SecurityToken input for this Choreo. ((required, string) Your Salesforce security token used for making API calls.)
        */
        this.set_SecurityToken = function(value) {
            this.setInput("SecurityToken", value);
        }

        /*
        Set the value of the Username input for this Choreo. ((required, string) Your Salesforce username.)
        */
        this.set_Username = function(value) {
            this.setInput("Username", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the CreateAccountObject Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var CreateAccountObjectResultSet = function(resultStream) {
    CreateAccountObjectResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "Response" output from this Choreo execution. ((xml) The full response from Salesforce)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
}

util.inherits(CreateAccountObject, choreography.Choreography);
util.inherits(CreateAccountObjectInputSet, choreography.InputSet);
util.inherits(CreateAccountObjectResultSet, choreography.ResultSet);
exports.CreateAccountObject = CreateAccountObject;


/*
    DeleteObject
    Deletes a specified Salesforce Object.
*/


var DeleteObject = function(session) {
    /*
        Create a new instance of the DeleteObject Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/Salesforce/DeleteObject"
    DeleteObject.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new DeleteObjectResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new DeleteObjectInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the DeleteObject
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var DeleteObjectInputSet = function() {
    DeleteObjectInputSet.super_.call(this);
        /*
        Set the value of the ID input for this Choreo. ((required, string) The ID of the Object you wish to delete)
        */
        this.set_ID = function(value) {
            this.setInput("ID", value);
        }

        /*
        Set the value of the Password input for this Choreo. ((required, password) Your Salesforce password.)
        */
        this.set_Password = function(value) {
            this.setInput("Password", value);
        }

        /*
        Set the value of the SecurityToken input for this Choreo. ((required, string) Your Salesforce security token used for API calls.)
        */
        this.set_SecurityToken = function(value) {
            this.setInput("SecurityToken", value);
        }

        /*
        Set the value of the Username input for this Choreo. ((required, string) Your Salesforce username.)
        */
        this.set_Username = function(value) {
            this.setInput("Username", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the DeleteObject Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var DeleteObjectResultSet = function(resultStream) {
    DeleteObjectResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "Response" output from this Choreo execution. ((xml) The full response from Salesforce)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
}

util.inherits(DeleteObject, choreography.Choreography);
util.inherits(DeleteObjectInputSet, choreography.InputSet);
util.inherits(DeleteObjectResultSet, choreography.ResultSet);
exports.DeleteObject = DeleteObject;


/*
    Query
    Executes a query against a Salesforce object and returns data that matches the specified criteria.
*/


var Query = function(session) {
    /*
        Create a new instance of the Query Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/Salesforce/Query"
    Query.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new QueryResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new QueryInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the Query
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var QueryInputSet = function() {
    QueryInputSet.super_.call(this);
        /*
        Set the value of the Password input for this Choreo. ((required, password) Your Salesforce password.)
        */
        this.set_Password = function(value) {
            this.setInput("Password", value);
        }

        /*
        Set the value of the Query input for this Choreo. ((required, string) The query to submit to Salesforce. This should be SOQL which differs from standard SQL in some cases (select FirstName, LastName from Lead limit 1).)
        */
        this.set_Query = function(value) {
            this.setInput("Query", value);
        }

        /*
        Set the value of the SecurityToken input for this Choreo. ((required, string) Your Salesforce security token for making API calls.)
        */
        this.set_SecurityToken = function(value) {
            this.setInput("SecurityToken", value);
        }

        /*
        Set the value of the Username input for this Choreo. ((required, string) Your Salesforce username.)
        */
        this.set_Username = function(value) {
            this.setInput("Username", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the Query Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var QueryResultSet = function(resultStream) {
    QueryResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "Response" output from this Choreo execution. ((xml) The response from the Salesforce query)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
}

util.inherits(Query, choreography.Choreography);
util.inherits(QueryInputSet, choreography.InputSet);
util.inherits(QueryResultSet, choreography.ResultSet);
exports.Query = Query;


/*
    UpdateAccountObject
    Updates an Account Object name.
*/


var UpdateAccountObject = function(session) {
    /*
        Create a new instance of the UpdateAccountObject Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/Salesforce/UpdateAccountObject"
    UpdateAccountObject.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new UpdateAccountObjectResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new UpdateAccountObjectInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the UpdateAccountObject
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var UpdateAccountObjectInputSet = function() {
    UpdateAccountObjectInputSet.super_.call(this);
        /*
        Set the value of the AccountId input for this Choreo. ((required, string) The ID for the account you want to update)
        */
        this.set_AccountId = function(value) {
            this.setInput("AccountId", value);
        }

        /*
        Set the value of the AccountName input for this Choreo. ((required, string) A new name to update the Account with)
        */
        this.set_AccountName = function(value) {
            this.setInput("AccountName", value);
        }

        /*
        Set the value of the Password input for this Choreo. ((required, password) Your Salesforce password.)
        */
        this.set_Password = function(value) {
            this.setInput("Password", value);
        }

        /*
        Set the value of the SecurityToken input for this Choreo. ((required, string) Your Salesforce security token used for making API calls.)
        */
        this.set_SecurityToken = function(value) {
            this.setInput("SecurityToken", value);
        }

        /*
        Set the value of the Username input for this Choreo. ((required, string) Your Salesforce username.)
        */
        this.set_Username = function(value) {
            this.setInput("Username", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the UpdateAccountObject Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var UpdateAccountObjectResultSet = function(resultStream) {
    UpdateAccountObjectResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "Response" output from this Choreo execution. ((xml) The response from Salesforce)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
}

util.inherits(UpdateAccountObject, choreography.Choreography);
util.inherits(UpdateAccountObjectInputSet, choreography.InputSet);
util.inherits(UpdateAccountObjectResultSet, choreography.ResultSet);
exports.UpdateAccountObject = UpdateAccountObject;




/******************************************************************************
Begin output wrapper classes
******************************************************************************/

/**
 * Utility function, to retrieve the array-type sub-item specified by the key from the parent (array) specified by the item.
 * Returns an empty array if key is not present.
 */
function getSubArrayByKey(item, key) {
	var val = item[key];
	if(val == null) {
		val = new Array();
	}
	return val;
}


